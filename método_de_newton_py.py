# -*- coding: utf-8 -*-
"""MÃ©todo de Newton.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L_A8SqCXKBgjeVmY9Nlh2NZS3WnxP_Cy
"""

from math import *
import numpy as np
import matplotlib.pyplot as plt

def funcion1(x):
    return cos(x)-x

def funcion2(x):
    return (-sin(x)-1)

#Ingrese el valor inicial 
p0 = pi/4
error = 100
tol = 0.0001
niter = 0
nmax = 100

print("n \t\t Pn \t\t error")
print("{0} \t\t {1:6.6f} \t {2:6.6f}".format(niter, p0, 0 ))

while error > tol and niter < nmax:
    p = p0- funcion1(p0)/(funcion2(p0))
    error = abs(funcion1(p0)-funcion1(p))
    p0 = p
    niter +=1
    print("{0} \t\t {1:6.9f} \t {2:6.9f}".format(niter, p0, error ))

print("La raiz apriximada es {0:6.9f}".format(p0))